{"version":3,"file":"ngx-clipboard.umd.js.map","sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard-if-supported.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"sourcesContent":["\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { IClipboardResponse } from './interface';\r\n\r\n// The following code is heavily copy from https://github.com/zenorocha/clipboard.js\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) public document: any,\r\n        @Optional() @Inject(WINDOW) private window: any\r\n    ) {}\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // this is for IE11 return true even if copy fail\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.window.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    public destroy(container: HTMLElement = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Moves focus away from `target` and back to the trigger, removes current selection.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse) {\r\n        this.copySubject.next(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement;\r\n    @Input()\r\n    public container: HTMLInputElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyReponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(private _clipboardService: ClipboardService, private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<any>) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n"],"names":["Subject","Injectable","Inject","DOCUMENT","Optional","WINDOW","EventEmitter","Directive","Input","Output","HostListener","ViewContainerRef","TemplateRef","NgModule","CommonModule"],"mappings":"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"}
