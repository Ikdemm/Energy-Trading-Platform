{"version":3,"sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard-if-supported.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"names":["ClipboardService","document","window","this","copySubject","Subject","copyResponse$","asObservable","Object","defineProperty","prototype","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","selectTarget","re","copyText","clearSelection","isCopySuccessInIE11","error","clipboardData","getData","copyFromContent","content","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","removeChild","undefined","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","pushCopyReponse","response","next","Injectable","args","providedIn","Inject","DOCUMENT","Optional","type","WINDOW","ClipboardDirective","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","ngOnInit","ngOnDestroy","onClick","event","isSupported","handleResult","cbContent","succeeded","copiedContent","isSuccess","assign","successMessage","cbSuccessMsg","emit","Directive","selector","Input","Output","HostListener","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","ClipboardModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { IClipboardResponse } from './interface';\r\n\r\n// The following code is heavily copy from https://github.com/zenorocha/clipboard.js\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) public document: any,\r\n        @Optional() @Inject(WINDOW) private window: any\r\n    ) {}\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // this is for IE11 return true even if copy fail\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.window.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    public destroy(container: HTMLElement = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Moves focus away from `target` and back to the trigger, removes current selection.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse) {\r\n        this.copySubject.next(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement;\r\n    @Input()\r\n    public container: HTMLInputElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyReponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(private _clipboardService: ClipboardService, private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<any>) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n"]}