/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { WINDOW } from 'ngx-window-token';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ngx-window-token";
// The following code is heavily copy from https://github.com/zenorocha/clipboard.js
export class ClipboardService {
    /**
     * @param {?} document
     * @param {?} window
     */
    constructor(document, window) {
        this.document = document;
        this.window = window;
        this.copySubject = new Subject();
        this.copyResponse$ = this.copySubject.asObservable();
    }
    /**
     * @return {?}
     */
    get isSupported() {
        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    isTargetValid(element) {
        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
            if (element.hasAttribute('disabled')) {
                throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
            }
            return true;
        }
        throw new Error('Target should be input or textarea');
    }
    /**
     * copyFromInputElement
     * @param {?} targetElm
     * @return {?}
     */
    copyFromInputElement(targetElm) {
        try {
            this.selectTarget(targetElm);
            /** @type {?} */
            const re = this.copyText();
            this.clearSelection(targetElm, this.window);
            return re && this.isCopySuccessInIE11();
        }
        catch (error) {
            return false;
        }
    }
    // this is for IE11 return true even if copy fail
    /**
     * @return {?}
     */
    isCopySuccessInIE11() {
        /** @type {?} */
        const clipboardData = this.window['clipboardData'];
        if (clipboardData && clipboardData.getData) {
            if (!clipboardData.getData('Text')) {
                return false;
            }
        }
        return true;
    }
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     * @param {?} content
     * @param {?=} container
     * @return {?}
     */
    copyFromContent(content, container = this.window.document.body) {
        // check if the temp textarea still belongs to the current container.
        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.
        if (this.tempTextArea && !container.contains(this.tempTextArea)) {
            this.destroy(this.tempTextArea.parentElement);
        }
        if (!this.tempTextArea) {
            this.tempTextArea = this.createTempTextArea(this.document, this.window);
            try {
                container.appendChild(this.tempTextArea);
            }
            catch (error) {
                throw new Error('Container should be a Dom element');
            }
        }
        this.tempTextArea.value = content;
        return this.copyFromInputElement(this.tempTextArea);
    }
    // remove temporary textarea if any
    /**
     * @param {?=} container
     * @return {?}
     */
    destroy(container = this.window.document.body) {
        if (this.tempTextArea) {
            container.removeChild(this.tempTextArea);
            // removeChild doesn't remove the reference from memory
            this.tempTextArea = undefined;
        }
    }
    // select the target html input element
    /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    selectTarget(inputElement) {
        inputElement.select();
        inputElement.setSelectionRange(0, inputElement.value.length);
        return inputElement.value.length;
    }
    /**
     * @private
     * @return {?}
     */
    copyText() {
        return this.document.execCommand('copy');
    }
    // Moves focus away from `target` and back to the trigger, removes current selection.
    /**
     * @private
     * @param {?} inputElement
     * @param {?} window
     * @return {?}
     */
    clearSelection(inputElement, window) {
        // tslint:disable-next-line:no-unused-expression
        inputElement && inputElement.focus();
        window.getSelection().removeAllRanges();
    }
    // create a fake textarea for copy command
    /**
     * @private
     * @param {?} doc
     * @param {?} window
     * @return {?}
     */
    createTempTextArea(doc, window) {
        /** @type {?} */
        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
        /** @type {?} */
        let ta;
        ta = doc.createElement('textarea');
        // Prevent zooming on iOS
        ta.style.fontSize = '12pt';
        // Reset box model
        ta.style.border = '0';
        ta.style.padding = '0';
        ta.style.margin = '0';
        // Move element out of screen horizontally
        ta.style.position = 'absolute';
        ta.style[isRTL ? 'right' : 'left'] = '-9999px';
        // Move element to the same position vertically
        /** @type {?} */
        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;
        ta.style.top = yPosition + 'px';
        ta.setAttribute('readonly', '');
        return ta;
    }
    /**
     * Pushes copy operation response to copySubject, to provide global access
     * to the response.
     * @param {?} response
     * @return {?}
     */
    pushCopyReponse(response) {
        this.copySubject.next(response);
    }
}
ClipboardService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ClipboardService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }
];
/** @nocollapse */ ClipboardService.ngInjectableDef = i0.defineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(i0.inject(i1.DOCUMENT), i0.inject(i2.WINDOW, 8)); }, token: ClipboardService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ClipboardService.prototype.tempTextArea;
    /**
     * @type {?}
     * @private
     */
    ClipboardService.prototype.copySubject;
    /** @type {?} */
    ClipboardService.prototype.copyResponse$;
    /** @type {?} */
    ClipboardService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    ClipboardService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,