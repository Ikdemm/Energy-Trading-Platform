import * as tslib_1 from "tslib";
import { UtilsService } from '../common/services/utils/utils.service';
import { Injectable } from '@angular/core';
var DatePickerDirectiveService = /** @class */ (function () {
    function DatePickerDirectiveService(utilsService) {
        this.utilsService = utilsService;
    }
    DatePickerDirectiveService.prototype.convertToHTMLElement = function (attachTo, baseElement) {
        if (typeof attachTo === 'string') {
            return this.utilsService.closestParent(baseElement, attachTo);
        }
        else if (attachTo) {
            return attachTo.nativeElement;
        }
        return undefined;
    };
    DatePickerDirectiveService.prototype.getConfig = function (config, baseElement, attachTo) {
        if (config === void 0) { config = {}; }
        var _config = tslib_1.__assign({}, config);
        _config.hideInputContainer = true;
        var native;
        if (config.inputElementContainer) {
            native = this.utilsService.getNativeElement(config.inputElementContainer);
        }
        else {
            native = baseElement ? baseElement.nativeElement : null;
        }
        if (native) {
            _config.inputElementContainer = attachTo
                ? this.convertToHTMLElement(attachTo, native)
                : native;
        }
        return _config;
    };
    DatePickerDirectiveService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [UtilsService])
    ], DatePickerDirectiveService);
    return DatePickerDirectiveService;
}());
export { DatePickerDirectiveService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItZGlyZWN0aXZlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItZGF0ZS1waWNrZXIvIiwic291cmNlcyI6WyJkYXRlLXBpY2tlci9kYXRlLXBpY2tlci1kaXJlY3RpdmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBRXBFLE9BQU8sRUFBYSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHckQ7SUFDRSxvQ0FBbUIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDN0MsQ0FBQztJQUVELHlEQUFvQixHQUFwQixVQUFxQixRQUE2QixFQUFFLFdBQXdCO1FBQzFFLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9EO2FBQU0sSUFBSSxRQUFRLEVBQUU7WUFDbkIsT0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDO1NBQy9CO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELDhDQUFTLEdBQVQsVUFBVSxNQUF1QyxFQUN2QyxXQUF3QixFQUN4QixRQUE4QjtRQUY5Qix1QkFBQSxFQUFBLFdBQXVDO1FBRy9DLElBQU0sT0FBTyx3QkFBbUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsT0FBTyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUVsQyxJQUFJLE1BQU0sQ0FBQztRQUVYLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFO1lBQ2hDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQzNFO2FBQU07WUFDTCxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDekQ7UUFFRCxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxRQUFRO2dCQUN0QyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7Z0JBQzdDLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDWjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFuQ1UsMEJBQTBCO1FBRHRDLFVBQVUsRUFBRTtpREFFc0IsWUFBWTtPQURsQywwQkFBMEIsQ0FvQ3RDO0lBQUQsaUNBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQXBDWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1V0aWxzU2VydmljZX0gZnJvbSAnLi4vY29tbW9uL3NlcnZpY2VzL3V0aWxzL3V0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHtJRGF0ZVBpY2tlckRpcmVjdGl2ZUNvbmZpZ30gZnJvbSAnLi9kYXRlLXBpY2tlci1kaXJlY3RpdmUtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyRGlyZWN0aXZlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB1dGlsc1NlcnZpY2U6IFV0aWxzU2VydmljZSkge1xuICB9XG5cbiAgY29udmVydFRvSFRNTEVsZW1lbnQoYXR0YWNoVG86IEVsZW1lbnRSZWYgfCBzdHJpbmcsIGJhc2VFbGVtZW50OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgICBpZiAodHlwZW9mIGF0dGFjaFRvID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMudXRpbHNTZXJ2aWNlLmNsb3Nlc3RQYXJlbnQoYmFzZUVsZW1lbnQsIGF0dGFjaFRvKTtcbiAgICB9IGVsc2UgaWYgKGF0dGFjaFRvKSB7XG4gICAgICByZXR1cm4gYXR0YWNoVG8ubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0Q29uZmlnKGNvbmZpZzogSURhdGVQaWNrZXJEaXJlY3RpdmVDb25maWcgPSB7fSxcbiAgICAgICAgICAgIGJhc2VFbGVtZW50PzogRWxlbWVudFJlZixcbiAgICAgICAgICAgIGF0dGFjaFRvPzogRWxlbWVudFJlZiB8IHN0cmluZyk6IElEYXRlUGlja2VyRGlyZWN0aXZlQ29uZmlnIHtcbiAgICBjb25zdCBfY29uZmlnOiBJRGF0ZVBpY2tlckRpcmVjdGl2ZUNvbmZpZyA9IHsuLi5jb25maWd9O1xuICAgIF9jb25maWcuaGlkZUlucHV0Q29udGFpbmVyID0gdHJ1ZTtcblxuICAgIGxldCBuYXRpdmU7XG5cbiAgICBpZiAoY29uZmlnLmlucHV0RWxlbWVudENvbnRhaW5lcikge1xuICAgICAgbmF0aXZlID0gdGhpcy51dGlsc1NlcnZpY2UuZ2V0TmF0aXZlRWxlbWVudChjb25maWcuaW5wdXRFbGVtZW50Q29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF0aXZlID0gYmFzZUVsZW1lbnQgPyBiYXNlRWxlbWVudC5uYXRpdmVFbGVtZW50IDogbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobmF0aXZlKSB7XG4gICAgICBfY29uZmlnLmlucHV0RWxlbWVudENvbnRhaW5lciA9IGF0dGFjaFRvXG4gICAgICAgID8gdGhpcy5jb252ZXJ0VG9IVE1MRWxlbWVudChhdHRhY2hUbywgbmF0aXZlKVxuICAgICAgICA6IG5hdGl2ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbmZpZztcbiAgfVxufVxuIl19